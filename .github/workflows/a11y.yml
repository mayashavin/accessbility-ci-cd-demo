name: A11y Check

on:
  push:
    branches:
      - master # Adjust to your default branch if different
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Upgrade npm
        run: npm install -g npm@latest

      - name: Install dependencies
        run: npm i

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: npm run lhci:autorun
        env:
          # GITHUB_TOKEN is automatically provided by GitHub Actions.
          # LHCI uses this token to add status checks to your PRs.
          LHCI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Lighthouse Report Artifacts
        if: always() # Upload artifacts even if lhci autorun fails assertions
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/ # Default directory where LHCI stores JSON reports
          if-no-files-found: warn # Warn if no reports found, change to 'error' if critical

  playwright-tests: # New job for Playwright tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm i

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npm test # Assumes 'npm test' is configured to run Playwright tests

      - name: Upload Playwright Report
        if: always() # Upload report even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/ # Default Playwright report directory
          if-no-files-found: warn

  post-summary:
    runs-on: ubuntu-latest
    needs: lighthouse # This job still only depends on lighthouse for the summary
    if: github.event_name == 'pull_request' && always() # Run for PRs, even if lighthouse failed
    permissions:
      contents: read # To checkout the repo
      pull-requests: write # To post comments to PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Match the lighthouse job or project's version
          cache: 'npm'

      - name: Install project dependencies
        run: npm ci # Ensures summarize-a11y.js can use project dependencies if needed

      - name: Download Lighthouse Report Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-reports
          path: ./.downloaded-lhci-reports # Download reports to this directory

      - name: Generate summary
        id: summary_generation
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} # Add this secret to your repo if your script uses OpenAI
          # Add any other environment variables your script might need
        run: |
          echo "summary_content<<EOF" >> $GITHUB_OUTPUT
          node scripts/summarize-a11y.js ./.downloaded-lhci-reports >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        # Consider adding 'continue-on-error: true' if the summary is non-critical

      - name: Post summary to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = `${{ steps.summary_generation.outputs.summary_content }}`.trim();

            if (!summary) {
              console.log("Summary is empty or the generation script failed. Skipping PR comment.");
              return;
            }

            const prNumber = context.issue.number;
            if (!prNumber) {
              console.log("Could not determine PR number (event is not a PR or context is missing). Skipping comment.");
              return;
            }

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `## Automated Accessibility Summary
                  ${summary}`
              });
            } catch (error) {
              console.error("Failed to post PR comment:", error);
              core.setFailed(`Failed to post PR comment: ${error.message}`);
            }
